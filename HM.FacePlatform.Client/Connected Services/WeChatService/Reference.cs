//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace HM.FacePlatform.Client.WeChatService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://www.vankeservice.com", ConfigurationName="WeChatService.WeChatService")]
    public interface WeChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetBuildingListByProject", ReplyAction="https://www.vankeservice.com/WeChatService/GetBuildingListByProjectResponse")]
        string GetBuildingListByProject(string project_code);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetBuildingListByProject", ReplyAction="https://www.vankeservice.com/WeChatService/GetBuildingListByProjectResponse")]
        System.Threading.Tasks.Task<string> GetBuildingListByProjectAsync(string project_code);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetHouseListByBuilding", ReplyAction="https://www.vankeservice.com/WeChatService/GetHouseListByBuildingResponse")]
        string GetHouseListByBuilding(string project_code, string building_code);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetHouseListByBuilding", ReplyAction="https://www.vankeservice.com/WeChatService/GetHouseListByBuildingResponse")]
        System.Threading.Tasks.Task<string> GetHouseListByBuildingAsync(string project_code, string building_code);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetPagedUserListByProject", ReplyAction="https://www.vankeservice.com/WeChatService/GetPagedUserListByProjectResponse")]
        string GetPagedUserListByProject(string project_code, int pageNumber, int rowsPerPage);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetPagedUserListByProject", ReplyAction="https://www.vankeservice.com/WeChatService/GetPagedUserListByProjectResponse")]
        System.Threading.Tasks.Task<string> GetPagedUserListByProjectAsync(string project_code, int pageNumber, int rowsPerPage);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetUpdatedUserListByProject", ReplyAction="https://www.vankeservice.com/WeChatService/GetUpdatedUserListByProjectResponse")]
        string GetUpdatedUserListByProject(string project_code, System.DateTime from, System.DateTime to, System.Nullable<int> top);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetUpdatedUserListByProject", ReplyAction="https://www.vankeservice.com/WeChatService/GetUpdatedUserListByProjectResponse")]
        System.Threading.Tasks.Task<string> GetUpdatedUserListByProjectAsync(string project_code, System.DateTime from, System.DateTime to, System.Nullable<int> top);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetPagedUpdatedRegisterListByProject", ReplyAction="https://www.vankeservice.com/WeChatService/GetPagedUpdatedRegisterListByProjectRe" +
            "sponse")]
        string GetPagedUpdatedRegisterListByProject(string project_code, int pageIndex, int pageSize, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetPagedUpdatedRegisterListByProject", ReplyAction="https://www.vankeservice.com/WeChatService/GetPagedUpdatedRegisterListByProjectRe" +
            "sponse")]
        System.Threading.Tasks.Task<string> GetPagedUpdatedRegisterListByProjectAsync(string project_code, int pageIndex, int pageSize, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetRegisterPhoto", ReplyAction="https://www.vankeservice.com/WeChatService/GetRegisterPhotoResponse")]
        string GetRegisterPhoto(string project_code, string photo_path);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetRegisterPhoto", ReplyAction="https://www.vankeservice.com/WeChatService/GetRegisterPhotoResponse")]
        System.Threading.Tasks.Task<string> GetRegisterPhotoAsync(string project_code, string photo_path);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetUser", ReplyAction="https://www.vankeservice.com/WeChatService/GetUserResponse")]
        string GetUser(string project_code, string user_uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/GetUser", ReplyAction="https://www.vankeservice.com/WeChatService/GetUserResponse")]
        System.Threading.Tasks.Task<string> GetUserAsync(string project_code, string user_uid);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/PutBuilding", ReplyAction="https://www.vankeservice.com/WeChatService/PutBuildingResponse")]
        string PutBuilding(string project_code, string serializedBuilding);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/PutBuilding", ReplyAction="https://www.vankeservice.com/WeChatService/PutBuildingResponse")]
        System.Threading.Tasks.Task<string> PutBuildingAsync(string project_code, string serializedBuilding);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/PutHouse", ReplyAction="https://www.vankeservice.com/WeChatService/PutHouseResponse")]
        string PutHouse(string project_code, string serializedHouse);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/PutHouse", ReplyAction="https://www.vankeservice.com/WeChatService/PutHouseResponse")]
        System.Threading.Tasks.Task<string> PutHouseAsync(string project_code, string serializedHouse);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/PutUser", ReplyAction="https://www.vankeservice.com/WeChatService/PutUserResponse")]
        string PutUser(string project_code, string serializedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/PutUser", ReplyAction="https://www.vankeservice.com/WeChatService/PutUserResponse")]
        System.Threading.Tasks.Task<string> PutUserAsync(string project_code, string serializedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/PutRegister", ReplyAction="https://www.vankeservice.com/WeChatService/PutRegisterResponse")]
        string PutRegister(string project_code, string serializedRegister);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/PutRegister", ReplyAction="https://www.vankeservice.com/WeChatService/PutRegisterResponse")]
        System.Threading.Tasks.Task<string> PutRegisterAsync(string project_code, string serializedRegister);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/PutEntryHistory", ReplyAction="https://www.vankeservice.com/WeChatService/PutEntryHistoryResponse")]
        string PutEntryHistory(string project_code, string serializedEntryHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/PutEntryHistory", ReplyAction="https://www.vankeservice.com/WeChatService/PutEntryHistoryResponse")]
        System.Threading.Tasks.Task<string> PutEntryHistoryAsync(string project_code, string serializedEntryHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/TestMethod", ReplyAction="https://www.vankeservice.com/WeChatService/TestMethodResponse")]
        string TestMethod();
        
        [System.ServiceModel.OperationContractAttribute(Action="https://www.vankeservice.com/WeChatService/TestMethod", ReplyAction="https://www.vankeservice.com/WeChatService/TestMethodResponse")]
        System.Threading.Tasks.Task<string> TestMethodAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WeChatServiceChannel : HM.FacePlatform.Client.WeChatService.WeChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeChatServiceClient : System.ServiceModel.ClientBase<HM.FacePlatform.Client.WeChatService.WeChatService>, HM.FacePlatform.Client.WeChatService.WeChatService {
        
        public WeChatServiceClient() {
        }
        
        public WeChatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeChatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeChatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetBuildingListByProject(string project_code) {
            return base.Channel.GetBuildingListByProject(project_code);
        }
        
        public System.Threading.Tasks.Task<string> GetBuildingListByProjectAsync(string project_code) {
            return base.Channel.GetBuildingListByProjectAsync(project_code);
        }
        
        public string GetHouseListByBuilding(string project_code, string building_code) {
            return base.Channel.GetHouseListByBuilding(project_code, building_code);
        }
        
        public System.Threading.Tasks.Task<string> GetHouseListByBuildingAsync(string project_code, string building_code) {
            return base.Channel.GetHouseListByBuildingAsync(project_code, building_code);
        }
        
        public string GetPagedUserListByProject(string project_code, int pageNumber, int rowsPerPage) {
            return base.Channel.GetPagedUserListByProject(project_code, pageNumber, rowsPerPage);
        }
        
        public System.Threading.Tasks.Task<string> GetPagedUserListByProjectAsync(string project_code, int pageNumber, int rowsPerPage) {
            return base.Channel.GetPagedUserListByProjectAsync(project_code, pageNumber, rowsPerPage);
        }
        
        public string GetUpdatedUserListByProject(string project_code, System.DateTime from, System.DateTime to, System.Nullable<int> top) {
            return base.Channel.GetUpdatedUserListByProject(project_code, from, to, top);
        }
        
        public System.Threading.Tasks.Task<string> GetUpdatedUserListByProjectAsync(string project_code, System.DateTime from, System.DateTime to, System.Nullable<int> top) {
            return base.Channel.GetUpdatedUserListByProjectAsync(project_code, from, to, top);
        }
        
        public string GetPagedUpdatedRegisterListByProject(string project_code, int pageIndex, int pageSize, System.DateTime from, System.DateTime to) {
            return base.Channel.GetPagedUpdatedRegisterListByProject(project_code, pageIndex, pageSize, from, to);
        }
        
        public System.Threading.Tasks.Task<string> GetPagedUpdatedRegisterListByProjectAsync(string project_code, int pageIndex, int pageSize, System.DateTime from, System.DateTime to) {
            return base.Channel.GetPagedUpdatedRegisterListByProjectAsync(project_code, pageIndex, pageSize, from, to);
        }
        
        public string GetRegisterPhoto(string project_code, string photo_path) {
            return base.Channel.GetRegisterPhoto(project_code, photo_path);
        }
        
        public System.Threading.Tasks.Task<string> GetRegisterPhotoAsync(string project_code, string photo_path) {
            return base.Channel.GetRegisterPhotoAsync(project_code, photo_path);
        }
        
        public string GetUser(string project_code, string user_uid) {
            return base.Channel.GetUser(project_code, user_uid);
        }
        
        public System.Threading.Tasks.Task<string> GetUserAsync(string project_code, string user_uid) {
            return base.Channel.GetUserAsync(project_code, user_uid);
        }
        
        public string PutBuilding(string project_code, string serializedBuilding) {
            return base.Channel.PutBuilding(project_code, serializedBuilding);
        }
        
        public System.Threading.Tasks.Task<string> PutBuildingAsync(string project_code, string serializedBuilding) {
            return base.Channel.PutBuildingAsync(project_code, serializedBuilding);
        }
        
        public string PutHouse(string project_code, string serializedHouse) {
            return base.Channel.PutHouse(project_code, serializedHouse);
        }
        
        public System.Threading.Tasks.Task<string> PutHouseAsync(string project_code, string serializedHouse) {
            return base.Channel.PutHouseAsync(project_code, serializedHouse);
        }
        
        public string PutUser(string project_code, string serializedUser) {
            return base.Channel.PutUser(project_code, serializedUser);
        }
        
        public System.Threading.Tasks.Task<string> PutUserAsync(string project_code, string serializedUser) {
            return base.Channel.PutUserAsync(project_code, serializedUser);
        }
        
        public string PutRegister(string project_code, string serializedRegister) {
            return base.Channel.PutRegister(project_code, serializedRegister);
        }
        
        public System.Threading.Tasks.Task<string> PutRegisterAsync(string project_code, string serializedRegister) {
            return base.Channel.PutRegisterAsync(project_code, serializedRegister);
        }
        
        public string PutEntryHistory(string project_code, string serializedEntryHistory) {
            return base.Channel.PutEntryHistory(project_code, serializedEntryHistory);
        }
        
        public System.Threading.Tasks.Task<string> PutEntryHistoryAsync(string project_code, string serializedEntryHistory) {
            return base.Channel.PutEntryHistoryAsync(project_code, serializedEntryHistory);
        }
        
        public string TestMethod() {
            return base.Channel.TestMethod();
        }
        
        public System.Threading.Tasks.Task<string> TestMethodAsync() {
            return base.Channel.TestMethodAsync();
        }
    }
}
